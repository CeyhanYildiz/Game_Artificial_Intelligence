#include <iostream>

#include <vector>
#include <string>

using namespace std;

/* Idee for a maze

 Samy :
â¬›â¬›â¬›â¬›â¬›â¬›â¬›
â¬›ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›
â¬›ğŸŸ¦â¬›â¬›â¬›ğŸŸ©â¬›
â¬›ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›
â¬›â¬œâ¬›ğŸŸ¦ğŸŸ¦ğŸŸ¥â¬›
â¬›â¬›â¬›â¬›â¬›â¬›â¬›

â¬œ = Path
â¬› = Wall

Ceyhan:


â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›        â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›
â¬›ğŸŸ©ğŸŸ©â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ©ğŸŸ©ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›
â¬›ğŸŸ©ğŸŸ©â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ©ğŸŸ©ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬›
â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›        â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›â¬›â¬›â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›
â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›        â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›        â¬›ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¦â¬›
â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›        â¬›ğŸŸ¨ğŸŸ¨â¬›â¬›â¬›â¬›ğŸŸ¦ğŸŸ¦â¬›â¬›â¬›â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›ğŸŸ¥ğŸŸ¥â¬›        â¬›ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œâ¬œğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¥ğŸŸ¥â¬›
â¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›â¬œâ¬œâ¬›ğŸŸ¥ğŸŸ¥â¬›        â¬›ğŸŸ¨ğŸŸ¨â¬›â¬œâ¬œâ¬œğŸŸ¦ğŸŸ¦ğŸŸ¦ğŸŸ¥ğŸŸ¥â¬›
â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›        â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›â¬›

â¬œ = Path         = P
â¬› = Wall         = W
ğŸŸ¦ = Correct Path = C
ğŸŸ© = Start        = S 
ğŸŸ¥ = End          = E
ğŸŸ¨ = Wrong Path   = w
*/

// Base class
class MazeElement 
{
    public:
        virtual char getSymbol() const = 0;  // Pure virtual function
        virtual ~MazeElement() {}  // Virtual destructor
};

// Derived classes
class Wall : public MazeElement 
{
    public:
        char getSymbol() const override { return 'W'; }
};

class Path : public MazeElement 
{
    public:
        char getSymbol() const override { return 'P'; }
};

class Checkpoint : public MazeElement 
{
    public:
        char getSymbol() const override { return 'C'; }
};



void printBlockSymbol(const MazeElement& element);


int main() 
{
    const int sizeMaze = 4; // sizeMaze x sizeMaze 

    // Using std::vector for the maze
    vector<vector<MazeElement*>> Maze((sizeMaze * 3) + 1, vector<MazeElement*>((sizeMaze * 3) + 1));

    for (int x = 0; x < (sizeMaze * 3) + 1; x++) 
    {
        for (int y = 0; y < (sizeMaze * 3) + 1; y++) 
        {
            if (y % 3 == 0 || x % 3 == 0) 
            {
                Maze[x][y] = new Wall();
            } else 
            {
                Maze[x][y] = new Path();
            }
        }
    }

    // Printing the maze
    for (int x = 0; x < (sizeMaze * 3) + 1; x++) 
    {
        for (int y = 0; y < (sizeMaze * 3) + 1; y++) 
        {
            printBlockSymbol(*Maze[x][y]);
        }
        cout << endl;
    }

    // Deallocating memory
    for (int x = 0; x < (sizeMaze * 3) + 1; x++) 
    {
        for (int y = 0; y < (sizeMaze * 3) + 1; y++) 
        {
            delete Maze[x][y];
        }
    }
    return 0;
}

void printBlockSymbol(const MazeElement& element) 
{
    switch (element.getSymbol()) 
    {
        case 'P': cout << "â¬œ"; break;
        case 'W': cout << "â¬›"; break;
        case 'C': cout << "ğŸŸ¦"; break;
        case 'S': cout << "ğŸŸ©"; break;
        case 'E': cout << "ğŸŸ¥"; break;
        case 'w': cout << "ğŸŸ¨"; break;
        default:
            cout << "Invalid value\n";
    }
}